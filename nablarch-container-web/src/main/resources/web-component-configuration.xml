<?xml version="1.0" encoding="UTF-8"?>

<component-configuration
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://tis.co.jp/nablarch/component-configuration"
    xsi:schemaLocation="http://tis.co.jp/nablarch/component-configuration  https://nablarch.github.io/schema/component-configuration.xsd">

  <!-- テーブル定義 -->
  <import file="nablarch/schema-config.xml" />

  <!-- 精査に使用する文字集合定義 -->
  <import file="nablarch/core/validation/charset-definition.xml"/>

  <!-- DomainManager 実装クラス設定 -->
  <component name="domainManager" class="com.nablarch.archetype.domain.SampleDomainManager"/>

  <!-- BeanValidation実装クラス -->
  <component name="validationStrategy" class="nablarch.common.web.validator.BeanValidationStrategy" />

  <!-- 環境設定ファイル -->
  <config-file file="common.config" />
  <config-file file="env.config" />

  <!-- Nablarch共通機能 -->
  <!-- コード機能 -->
  <import file="nablarch/common/code.xml"/>
  <!-- 自動採番型を持たないRDBMSで、ユニバーサルDAOを使用するための設定 -->
  <import file="nablarch/common/dao.xml" />

  <!-- web固有設定の読み込み -->
  <!-- データベース設定 -->
  <import file="nablarch/webui/db-for-webui.xml"/>
  <import file="data-source.xml" />

  <!-- エラーページ設定 -->
  <import file="nablarch/webui/error-page-for-webui.xml" />

  <!-- ファイルパス設置 -->
  <import file="nablarch/webui/filepath-for-webui.xml" />

  <!-- インターセプタの実行順定義 -->
  <import file="nablarch/webui/interceptors.xml" />

  <!-- ファイルアップロード機能設定 -->
  <import file="nablarch/webui/multipart.xml" />

  <!-- カスタムタグ設定 -->
  <import file="nablarch/webui/nablarch-tag.xml" />

  <!-- 二重サブミット防止機能 -->
  <import file="nablarch/webui/double-submission.xml" />
  <component name="tokenManager" class="nablarch.common.web.token.DbTokenManager">
    <property name="dbManager">
      <component class="nablarch.core.db.transaction.SimpleDbTransactionManager">
        <property name="dbTransactionName" value="tokenTransaction"/>
      </component>
    </property>
  </component>

  <!-- スレッドコンテキストハンドラ -->
  <import file="nablarch/webui/threadcontext-for-webui-in-sessionstore.xml"/>

  <!-- hidden暗号化機能を使用しないリクエストID -->
  <list name="noHiddenEncryptionRequestIds">
    <!-- <value></value> -->
  </list>

  <!-- パッケージマッピングの設定 -->
  <component name="packageMapping"
             class="nablarch.integration.router.RoutesMapping">
      <property name="routes" value="routes.xml"/>
      <property name="baseUri" value="" />
      <property name="checkInterval" value="${nablarch.routesMapping.checkInterval}"/>
      <property name="basePackage" value="${nablarch.commonProperty.basePackage}" />
  </component>

  <!-- セッションストア機能 -->
  <import file="nablarch/webui/session-store.xml" />
  <!-- 有効期間をDBに保存する -->
  <component name="sessionStoreHandler" class="nablarch.common.web.session.SessionStoreHandler">
    <property name="expiration" ref="expiration" />
  </component>
  <component name="expiration" class="nablarch.common.web.session.DbManagedExpiration">
    <!-- データベースへのトランザクション制御を行うクラス -->
    <property name="dbManager">
      <component class="nablarch.core.db.transaction.SimpleDbTransactionManager">
        <property name="dbTransactionName" value="expirationTransaction"/>
      </component>
    </property>
  </component>
  <!-- TODO: アプリケーションサーバが冗長化されている場合は、HIDDENストアの暗号化に使用するコンポーネントのプロパティに明示的に暗号化/復号のキーを設定する。-->
  <!--
  <component name="hiddenStoreEncryptor" class="nablarch.common.encryption.AesEncryptor">
    <property name="key" value="1234567890123456" />
    <property name="iv" value="6543210987654321" />
  </component>
  -->

  <component name="httpErrorHandler" class="nablarch.fw.web.handler.HttpErrorHandler" >
    <property name="defaultPages">
      <map>
        <!-- TODO: 適切なエラー画面作成して設定してください。設定の際は、あわせてweb.xmlも修正してください -->
        <entry key="4.." value="/errorPages/USER_ERROR.jsp" />
        <entry key="403" value="/errorPages/PERMISSION-ERROR.jsp" />
        <entry key="404" value="/errorPages/PAGE_NOT_FOUND_ERROR.jsp" />
        <entry key="413" value="/errorPages/REQUEST_ENTITY_TOO_LARGE.jsp" />
        <entry key="5.." value="/errorPages/ERROR.jsp" />
        <entry key="503" value="/errorPages/SERVICE-UNAVAILABLE-ERROR.jsp" />
      </map>
    </property>
  </component>

  <!-- ハンドラキュー構成 -->
  <component name="webFrontController"
             class="nablarch.fw.web.servlet.WebFrontController">

    <property name="preventSessionCreation" value="true" />

    <property name="handlerQueue">
      <list>
        <component class="nablarch.fw.web.handler.HttpCharacterEncodingHandler"/>

        <component class="nablarch.fw.handler.GlobalErrorHandler"/>

        <component class="nablarch.common.handler.threadcontext.ThreadContextClearHandler"/>

        <component class="nablarch.fw.web.handler.HttpResponseHandler"/>

        <component class="nablarch.fw.web.handler.SecureHandler" />

        <component-ref name="multipartHandler"/>

        <component-ref name="sessionStoreHandler" />

        <component-ref name="threadContextHandler"/>

        <component class="nablarch.common.web.handler.HttpAccessLogHandler"/>

        <component class="nablarch.fw.web.handler.NormalizationHandler" />

        <component class="nablarch.fw.web.handler.ForwardingHandler"/>

        <component-ref name="httpErrorHandler" />

        <component-ref name="nablarchTagHandler"/>

        <component-ref name="dbConnectionManagementHandler"/>

        <component-ref name="transactionManagementHandler"/>

        <component-ref name="packageMapping"/>
      </list>
    </property>
  </component>

  <!-- 初期化が必要なコンポーネント -->
  <component name="initializer"
             class="nablarch.core.repository.initialization.BasicApplicationInitializer">
    <property name="initializeList">
      <list>
        <!-- web/code.xml:コードのローダ -->
        <component-ref name="codeLoader" />
        <!-- web/code.xml:コードのキャッシュ -->
        <component-ref name="codeCache" />
        <!-- web/session-store.xml:DBストア-->
        <component-ref name="dbStore" />
        <!-- パッケージマッピング-->
        <component-ref name="packageMapping"/>
        <!-- セッションストアの有効期間 -->
        <component-ref name="expiration"/>
        <!-- 二重サブミット防止機能用TokenManager -->
        <component-ref name="tokenManager"/>
      </list>
    </property>
  </component>
</component-configuration>
